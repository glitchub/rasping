#!/usr/bin/python3
import os, sys
from getopt import getopt
from fnmatch import fnmatch
from time import sleep
import subprocess

if len(sys.argv) < 3:
    print("""
Usage:

    autobridge [!]pattern [... [!]pattern] bridge

Given one or more glob-style network interface name patterns and a bridge name,
add matching interfaces to the bridge as they appear. If the pattern starts with
"!" then matching interfaces will always be ignored.

The bridge will be created if it doesn't already exist.

""", file=sys.stderr)
    quit()

# return set of known interfaces
def interfaces(): return set(os.listdir('/sys/class/net'))

# given bridge name, return set of bridged interfaces
def bridged(bridge): return set(os.listdir('/sys/class/net/%s/brif' % bridge))

# execute the 'ip' command with given command line
def ip(cmd): subprocess.call(["sudo", "ip"] + cmd.split())

# return true if string s matches any listed glob
def matches(s, globs):
    for g in globs:
        if fnmatch(g, s):
            return True
    return False

bridge = sys.argv[-1]

exclude={'lo', bridge}
include=set()

for pattern in sys.argv[1:-1]:
    if pattern == "!": raise Exception("Invalid pattern %s" % pattern);
    if pattern.startswith("!"): exclude.add(pattern[1:])
    else: include.add(patten)

if not len(include): raise Exception("Must specify at least one include pattern")

if not bridge in interfaces(): ip("link add name %s type bridge" % bridge)
ip("link set %s up" % bridge)

try:
    bridged(bridge)
except FileNotFoundError:
    raise Exception("%s is not a bridge" % bridge)

while True:
    for i in interfaces-bridged(bridge):
        if matches(i, include) and not matches(i, exclude):
            print("Bridging %s" % i)
            ip("link set dev %s master %s" % (i, bridge))
    sleep(1)

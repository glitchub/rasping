#!/usr/bin/python3 -u
# Note unbuffered output

import os, sys
from getopt import getopt
import subprocess
import netlink

usage="""
Usage:

    autobridge [options] pattern [... pattern] bridge

Given one or more glob-style network interface name patterns and a bridge name,
create the bridge if necessary and add matching interfaces to it as they
appear.

Options are:

    -i ip.ad.re.ss/nm - set static IP for the bridge.

    -x pattern - interfaces that match this patterm will always be ignored. Can
    be used multiple times.

    -u inteface - bridge state cycles the upstream interface state changes from
    down to up.

"""

# execute the 'ip' command with given command line
def ip(cmd): return subprocess.call(["ip"] + cmd.split())

# parse command line param
bridge = sys.argv[-1]   # bridge name
reject={'lo', bridge}   # set of interfaces to ignore
accept=set()            # set of interfaces to be bridged
upstream=None           # upstream interface, if any
staticip=None           # static IP to apply to bridge, if any

try:
    opts, args = getopt(sys.argv[1:],"u:x:i:")
    if len(args) < 2: raise Exception("Must specify at least one pattern and a bridge name.")
    accept.update(args[:-1])
    bridge=args[-1]
    for opt, arg in opts:
        if opt == "-i":
            if staticip: raise Exception("Can't specify -i more than once.")
            staticip = arg
        elif opt == "-x":
            reject.add(arg)
        elif opt == "-u":
            if upstream: raise Exception("Can't specify -u more than once.")
            upstream = arg     # remember it
            accept.add(arg)    # also autobridge it

except Exception as e:
    print(str(e), usage, file=sys.stderr)
    quit(1)

print("Using bridge %s" % bridge)

# create the netlink object
nl=netlink.netlink()

# add interface to bridge
def add(ifname):
    print("Bridging", ifname)
    if ip("link set dev %s master %s up" % (ifname, bridge)):
        print("Could not change %s" % ifname)

print("Auto-bridging interfaces that match %s but not %s" % (str(accept)[1:-1], str(reject)[1:-1]))
if upstream: print("Upstream interface is %s" % upstream)

# scan existing devices
got=False       # found bridge device
wasup=None      # upstream device is currently up
bridged=set()   # currently bridged interfaces

# dump without filter
for i in nl.dump():
    if i.ifname == bridge:
        got=True
    elif netlink.matches(i.ifname, accept) and not netlink.matches(i.ifname, reject):
        bridged.add(i.ifname)
        if i.ifname == upstream: wasup = i.up and i.carrier

if not got:
    print("Creating %s" % bridge)
    if ip("link add name %s type bridge" % bridge):
        raise Exception("Could not create bridge")

if staticip:
    print("Setting static IP %s" % staticip)
    ip("address flush dev %s" % bridge)
    if ip("address add %s dev %s" % (staticip, bridge)):
        raise Exception("Could not set bridge IP")

if ip("link set dev %s up" % bridge): raise Exception("Could not up bridge")

if wasup is None: print("Warning, upstream interface does not exist")

# bridge existing interfaces
for i in bridged: add(i)

# now wait for changes, this loops forever
for i in nl.wait(accept=accept, reject=reject):
    if not i.attached:
        # e.g. usb dongle unplugged
        if i.ifname in bridged:
            print("Forgetting", i.ifname)
            bridged.discard(i.ifname)
    elif i.ifname not in bridged:
        # a new device
        bridged.add(i.ifname)
        add(i.ifname)

    # track upstream interfaace state
    if i.ifname == upstream:
        isup = i.attached and i.carrier and i.up
        if isup != wasup:
            print(upstream,"is","up" if isup else "down")
            if isup:
                # toggle bridge down and up, this should wake dhcpcd
                print("Cycling",bridge)
                if ip("link set dev %s down" % bridge): raise Exception("Could not down bridge")
                if ip("link set dev %s up" % bridge): raise Exception("Could not up bridge")
            wasup = isup

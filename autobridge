#!/usr/bin/python3
import os, sys
from getopt import getopt
from fnmatch import fnmatch
from time import sleep
import subprocess

if len(sys.argv) < 3:
    print("""
Usage:

    autobridge [~]pattern [... [~]pattern] bridge

Given one or more glob-style network interface name patterns and a bridge name,
create the bridge if necessary and add matching interfaces to it as they
appear.

Negative patterns start with "~" and matching interfaces will always be
ignored.

At least one positive pattern must be specified.

""", file=sys.stderr)
    quit()

# parse command line params
bridge = sys.argv[-1]
exclude={'lo', bridge}
include=set()

for pattern in sys.argv[1:-1]:
    if pattern.startswith("~"):
        if not pattern[1:]: raise Exception("Invalid pattern %s" % pattern)
        exclude.add(pattern[1:])
    else: include.add(pattern)

if not len(include): include.add('*')

# return list of network interfaces
def interfaces(): return os.listdir('/sys/class/net')

# execute the 'ip' command with given command line
def ip(cmd): return subprocess.call(["sudo", "ip"] + cmd.split())

# return true if string s matches any listed glob
def matches(s, globs):
    for g in globs:
        if fnmatch(s, g):
            return True
    return False

if not bridge in interfaces():
    print("Creating bridge %s" % bridge)
    if ip("link add name %s type bridge" % bridge):
        raise Exception("Failed to create bridge %s" % bridge)
else:
    if not os.path.isdir("/sys/class/net/%s/brif" % bridge):
        raise Exception("%s is not a bridge" % bridge)
    print("Using bridge %s" % bridge)

# make sure the bridge is up
ip("link set %s up" % bridge)

print("Waiting for interfaces that match %s but not %s" % (str(include)[1:-1], str(exclude)[1:-1]))

# spin forever looking for new interfaces to add to the bridge
while True:
    sleep(1)
    for i in set(interfaces()) - set(os.listdir('/sys/class/net/%s/brif' % bridge)):
        if matches(i, include) and not matches(i, exclude):
            print("Adding %s" % i)
            if ip("link set dev %s master %s" % (i, bridge)):
                print("Add failed, ignoring %S" % i)
                exclude.add(i)

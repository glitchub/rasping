#!/usr/bin/python3
import os, sys
from getopt import getopt
from fnmatch import fnmatch
from time import sleep
import subprocess

if len(sys.argv) < 2:
    print("""
Usage:

    autobridge [-v vlan-id] [-x pattern] pattern [... pattern] bridge

Given one or more glob-style network interface name patterns and a bridge name,
add matching interfaces to the bridge as they appear.

Options:

    -v vlan-id - all bridged devices will be assigned the specfied vlan-id, which
    must be a number from 1 to 4094.

    -x pattern - interfaces that match the pattern will be ignored. Can be
    specified multiple times. "-xlo" is implicitly defined.
""", file=sys.stderr)
    quit()

exclude=set()
include=set()
vlan=None

# return true if string s matches any of list globs
def matches(s, globs):
    for g in globs:
        if fnmatch(g, s):
            return True
    return False

opts, args = getopt(sys.argv[1:],"v:x:")
for opt, arg in opts:
    if   opt == "-v":
        vlan = int(arg)
        assert(1 <= vlan <= 4094)
    elif opt == "-x":
        exclude.add(arg)
    else:
        raise Exception("Invalid option '%s'" % opt)

include.update(args[:-1])
bridge = args[-1]
exclude.update([bridge,'lo'])

print("Bridge:%s include:%s exclude:%s" % (bridge, str(include), str(exclude)))

while True:
    ifs = set(os.listdir('/sys/class/net'))                       # all interfaces
    brifs = set(os.listdir('/sys/class/net/%s/brif' % bridge))    # bridged interfaces
    for i in ifs - brifs:
        if matches(i, include) and not matches(i, exclude):
            print("Adding %s to %s..." % i, bridge)
            subprocess.call(("ip link set dev %s master %s" % (i, bridge)).split())
    sleep(1)

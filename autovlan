#!/usr/bin/python3 -u
#Note unbuffered output

import os, sys, subprocess, netlink
from getopt import getopt

usage="""
Usage:

    autovlan [options] pattern [... pattern] vlanid

Given one or more glob-style network interface name patterns and a vlan id 1 to
4094, create a vlan for each matching interface.

Options are:

    -x pattern - interfaces that match this patterm will always be ignored. Can
    be used multiple times.
"""

reject={'lo', 'vlan.*'}
accept=set()

try:
    opts, args = getopt(sys.argv[1:],"x:")
    if len(args) < 2: raise Exception("Must specify at least one pattern and a vlan ID.")
    accept.update(args[:-1])
    vlanid=args[-1]
    assert 1 <= int(vlanid) <= 4094
    for opt, arg in opts:
        if opt == "-x": reject.add(arg)
except Exception as e:
    print (str(e), usage, file=sys.stderr)
    quit(1)

# execute the 'ip' command with given command line
def ip(cmd): return subprocess.call(["ip"] + cmd.split())

vlan=set() # interfaces that we have vlan'd (or failed to)

# create vlan for interface
def add(ifname):
    vname="vlan."+ifname
    if vname not in vlan:
        print("Creating", vname)
        # take interface up first
        if ip("link set dev %s up" % i.ifname):
            print("Could not bring %s up" % i.ifname)
        elif ip("link add link %s name %s type vlan id %s" % (i.ifname, vname, vlanid)):
            print("Could not create %s" % vname)
        vlan.add(vname)

# forget vlan for interface
def drop(ifname):
    vname="vlan."+ifname
    if vname in vlan:
        print("Forgetting",vname)
        vlan.discard(vname)

print("Applying vlan ID %s to interfaces that match %s but not %s" % (vlanid, str(accept)[1:-1], str(reject)[1:-1]))

# open the netlink object
nl=netlink.netlink()

# First find any existing vlan.* devices so we won't try to create them again
for i in nl.dump(accept=["vlan.?*"]):
    print("Inheriting", i.ifname)
    vlan.add(i.ifname)

# Create vlans for all existing interfaces
for i in nl.dump(accept=accept, reject=reject):
    add(i.ifname)

# Wait for new
for i in nl.wait(accept=accept, reject=reject):
    if i.attached: add(i.ifname)
    else: drop(i.ifname)

#!/usr/bin/python3 -u
# Note, -u unbuffers the output so systemd can log it correctly

import os, sys, subprocess, netlink
from getopt import getopt

usage="""
Usage:

    autovlan [options] vlanid [... vlanid]

Given at least one vlan ID from 1 to 4094, create vlans for interfaces
specified with -m.

Options are:

    -m pattern - interfaces that match the pattern will be vlan'ed, unless they
    also match a -x pattern. Can be used multiple times, must be specified at
    least once.

    -x pattern - interfaces that match the pattern will never be vlan'ed, even
    if they match a -m pattern. Can be used multiple times.
"""

vlanids=set()
reject={'lo', 'vlan.*'}
accept=set()

try:
    opts, args = getopt(sys.argv[1:],"m:x:")
    if not args: raise Exception("Must specify at least one vlan ID")
    for opt, arg in opts:
        if opt == "-m": accept.add(arg)
        elif opt == "-x": reject.add(arg)
except Exception as e:
    print (str(e), usage, file=sys.stderr)
    quit(1)

try:
    vlanids.update([int(a,0) for a in args]) # allow hex or decimal
    for vlanid in vlanids: assert 1 <= vlanid <= 4094
except Exception as e:
    print(str(e),"Vlan ID is invalid or not in range 1-4094")
    quit(1)

# execute the 'ip' command with given command line
def ip(cmd): return subprocess.call(["ip"] + cmd.split())

vlan=set() # interfaces that we have vlan'd (or failed to)

# create vlan(s) for interface
def add(ifname):
    for vlanid in vlanids:
        vname="vlan.%d.%s" % (vlanid, ifname)
        if vname not in vlan:
            print("Creating", vname)
            # take interface up first
            if ip("link set dev %s up" % ifname):
                print("Could not bring %s up" % ifname)
            elif ip("link add link %s name %s type vlan id %s" % (ifname, vname, vlanid)):
                print("Could not create %s" % vname)
            vlan.add(vname)

# forget vlan(s) for interface
def forget(ifname):
    for vlanid in vlanids:
        vname="vlan.%d.%s" % (vlanid, ifname)
        if vname in vlan:
            print("Forgetting",vname)
            vlan.discard(vname)

print("Applying vlan ID(s) %s to interfaces that match %s but not %s" % (str(vlanids)[1:-1], str(accept)[1:-1], str(reject)[1:-1]))

# open the netlink object
nl=netlink.netlink()

# First find any existing vlan.* devices so we won't try to create them again
for i in nl.dump(accept=["vlan.*.*"]):
    print("Inheriting", i.ifname)
    vlan.add(i.ifname)

# Create vlans for all existing interfaces
for i in nl.dump(accept=accept, reject=reject):
    add(i.ifname)

# Wait for new
for i in nl.wait(accept=accept, reject=reject):
    if i.exists: add(i.ifname)
    else: forget(i.ifname)
